export interface Options {
    indent?: string;
    eol?: string;
    separator?: string;
    prefix?: string;
    suffix?: string;
}
export declare type Stringable = string | {
    toString(): string;
};
export interface Strand {
    (...args: Stringable[]): Strand;
    toString(): string;
}
export declare function strand(separator?: string, prefix?: string, suffix?: string): Strand;
export declare class Strands {
    strand: Strand;
    options: Options;
    newline: boolean;
    constructor({prefix, suffix, separator, indent, eol}?: Options);
    return(count?: number): void;
    line(...values: Stringable[]): this;
    lines(lines: Stringable[]): this;
    multiline(value: Stringable): this;
    append(...args: Stringable[]): this;
    toString(): string;
}
export declare function wrap<T>(fn: (t: Strands, data: T) => any, options?: Options): (data: T) => string;
