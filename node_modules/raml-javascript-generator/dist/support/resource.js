"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var camelCase = require("camel-case");
var stringify = require("javascript-stringify");
var TEMPLATE_REGEXP = /\{\+?(\w+)\}/g;
function getUriParametersSnippet(resource) {
    var uriParams = getUsedUriParameters(resource.relativeUri, resource.uriParameters);
    return Object.keys(uriParams).map(function (key) {
        var param = uriParams[key];
        var options = [];
        if (param.type) {
            options.push("type: `" + param.type + "`");
        }
        if (Array.isArray(param.enum) && param.enum.length) {
            options.push("one of (" + param.enum.join(', ') + ")");
        }
        if (param.default) {
            options.push("default: `" + stringify(param.default) + "`");
        }
        return "* **" + key + "**" + (param.description ? " " + param.description.trim() : '') + " (" + options.join(', ') + ")";
    }).join('\n');
}
exports.getUriParametersSnippet = getUriParametersSnippet;
function getUsedUriParameters(uri, uriParameters) {
    var params = {};
    var match;
    while (match = TEMPLATE_REGEXP.exec(uri)) {
        var key = match[1];
        params[key] = uriParameters[key] || { type: 'string', required: true };
    }
    return params;
}
exports.getUsedUriParameters = getUsedUriParameters;
function toMethodName(uri) {
    if (/^[\.\/]\{[^\{\}]+\}$/.test(uri)) {
        return camelCase(uri.slice(2, -1));
    }
    if (/^[\.\/][^\{\}]+(?:\{[^\{\}]+\})*$/.test(uri)) {
        return camelCase(uri.replace(/\{.+\}$/, ''));
    }
    return camelCase(uri);
}
exports.toMethodName = toMethodName;
//# sourceMappingURL=resource.js.map