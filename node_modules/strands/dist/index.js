function strand(separator, prefix, suffix) {
    if (separator === void 0) { separator = ''; }
    if (prefix === void 0) { prefix = ''; }
    if (suffix === void 0) { suffix = ''; }
    var out = prefix;
    function strand() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        for (var _a = 0; _a < args.length; _a++) {
            var value = args[_a];
            if (out === prefix) {
                out += value;
            }
            else {
                out += separator + value;
            }
        }
        return strand;
    }
    strand.toString = function () { return out + suffix; };
    return strand;
}
exports.strand = strand;
var Strands = (function () {
    function Strands(_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.prefix, prefix = _c === void 0 ? '' : _c, _d = _b.suffix, suffix = _d === void 0 ? '' : _d, _e = _b.separator, separator = _e === void 0 ? '' : _e, _f = _b.indent, indent = _f === void 0 ? '' : _f, _g = _b.eol, eol = _g === void 0 ? '\n' : _g;
        this.newline = true;
        this.strand = strand(separator, prefix, suffix);
        this.options = { indent: indent, eol: eol };
    }
    Strands.prototype.return = function (count) {
        if (count === void 0) { count = 1; }
        while (count--) {
            this.strand(this.options.eol);
            this.newline = true;
        }
    };
    Strands.prototype.line = function () {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i - 0] = arguments[_i];
        }
        if (this.newline) {
            this.strand(this.options.indent);
        }
        this.strand.apply(this, values);
        this.return();
        return this;
    };
    Strands.prototype.lines = function (lines) {
        for (var _i = 0; _i < lines.length; _i++) {
            var value = lines[_i];
            this.line(value);
        }
        return this;
    };
    Strands.prototype.multiline = function (value) {
        return this.lines(String(value).split(/\r?\n/g));
    };
    Strands.prototype.append = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        this.strand.apply(this, args);
        this.newline = false;
        return this;
    };
    Strands.prototype.toString = function () {
        return this.strand.toString();
    };
    return Strands;
})();
exports.Strands = Strands;
function wrap(fn, options) {
    return function (data) {
        var t = new Strands(options);
        fn(t, data);
        return t.toString();
    };
}
exports.wrap = wrap;
//# sourceMappingURL=index.js.map