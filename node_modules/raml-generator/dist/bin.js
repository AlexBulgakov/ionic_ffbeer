"use strict";
var Promise = require('any-promise');
var thenify = require('thenify');
var path_1 = require('path');
var raml_1_parser_1 = require('raml-1-parser');
var yargs = require('yargs');
var mkdrp = require('mkdirp');
var fs = require('fs');
var parseJson = require('parse-json');
var mkdirp = thenify(mkdrp);
var readFile = thenify(fs.readFile);
var writeFile = thenify(fs.writeFile);
function bin(generator, pkg, argv) {
    var cwd = process.cwd();
    var args = yargs
        .usage(pkg.description + "\n\n$0 api.raml --out [directory]")
        .version(pkg.version, 'version')
        .demand('o')
        .alias('o', 'out')
        .describe('o', 'Out directory')
        .alias('d', 'data')
        .describe('d', 'Path to JSON configuration file')
        .array('include')
        .alias('i', 'include')
        .describe('i', 'Include additional RAML files (E.g. extensions)')
        .parse(argv);
    return raml_1_parser_1.loadApi(args._[2], args.include || [], { rejectOnErrors: true })
        .then(function (api) {
        var json = api.expand().toJSON();
        if (args.data == null) {
            return Promise.resolve(generator(json));
        }
        var path = path_1.resolve(cwd, args.data);
        return readFile(path, 'utf8')
            .then(function (contents) { return parseJson(contents, null, path); })
            .then(function (data) { return generator(json, data); });
    })
        .then(function (output) {
        return objectToFs(path_1.resolve(cwd, args.out), output.files);
    })
        .then(function () {
        process.exit(0);
    })
        .catch(function (err) {
        if (err.parserErrors) {
            err.parserErrors.forEach(function (parserError) {
                console.error(parserError.path + " (" + (parserError.line + 1) + ", " + (parserError.column + 1) + "): " + parserError.message);
            });
        }
        console.error(err.stack || err.message || err);
        process.exit(1);
    });
}
exports.bin = bin;
function objectToFs(path, object) {
    return Object.keys(object).reduce(function (promise, file) {
        var content = object[file];
        var filename = path_1.resolve(path, file);
        var output = path_1.dirname(filename);
        return promise
            .then(function () {
            return mkdirp(output);
        })
            .then(function () {
            return writeFile(filename, content);
        });
    }, mkdirp(path).then(function () { return undefined; }));
}
//# sourceMappingURL=bin.js.map