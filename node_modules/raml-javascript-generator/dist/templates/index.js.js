"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var strands_1 = require("strands");
var camelCase = require("camel-case");
var stringify = require("javascript-stringify");
var parameters_1 = require("../support/parameters");
var api_1 = require("../support/api");
var method_1 = require("../support/method");
function default_1(api) {
    var s = new strands_1.Strands();
    var flatTree = api_1.allResources(api);
    var nestedTree = api_1.nestedResources(api);
    var _a = separateChildren(nestedTree), withParams = _a.withParams, noParams = _a.noParams;
    var supportedSecuritySchemes = api_1.getSecuritySchemes(api).filter(function (x) { return x.type === 'OAuth 2.0'; });
    if (api_1.hasSecurity(api, 'OAuth 2.0')) {
        s.line("var ClientOAuth2 = require('client-oauth2')");
    }
    s.multiline("var popsicle = require('popsicle')\nvar extend = require('xtend')\nvar setprototypeof = require('setprototypeof')\n\nvar TEMPLATE_REGEXP = /\\{([^\\{\\}]+)\\}/g\n\nmodule.exports = Client\n\nfunction template (string, interpolate) {\n  return string.replace(TEMPLATE_REGEXP, function (match, key) {\n    if (interpolate[key] != null) {\n      return encodeURIComponent(interpolate[key])\n    }\n\n    return ''\n  })\n}\n\nfunction request (client, method, path, opts) {\n  var options = extend({}, client._options, opts)\n  var baseUri = template(options.baseUri, options.baseUriParameters)\n\n  var reqOpts = {\n    url: baseUri.replace(/\\/$/, '') + template(path, options.uriParameters),\n    method: method,\n    headers: options.headers,\n    body: options.body,\n    query: options.query,\n    options: options.options\n  }\n\n  if (options.user && typeof options.user.sign === 'function') {\n    reqOpts = options.user.sign(reqOpts)\n  }\n\n  return popsicle.request(reqOpts)\n}\n\nfunction Client (options) {\n  this._path = ''\n  this._options = extend({\n    baseUri: " + stringify(api.baseUri) + ",\n    baseUriParameters: " + stringify(parameters_1.getDefaultParameters(api.baseUriParameters)) + "\n  }, options)\n\n  function client (method, path, options) {\n    return request(client, method, path, options)\n  }\n");
    createThisResources(withParams, noParams, 'client', '');
    s.line("  setprototypeof(client, this)");
    s.line("  return client");
    s.line("}");
    s.line();
    s.line("Client.form = popsicle.form");
    s.line("Client.version = " + stringify(api.version));
    s.line('Client.Security = {');
    supportedSecuritySchemes.forEach(function (scheme, index, schemes) {
        var name = camelCase(scheme.name);
        var trailing = index < schemes.length ? ',' : '';
        if (scheme.type === 'OAuth 2.0') {
            s.line("  " + name + ": function (options) { return new ClientOAuth2(extend(" + stringify(scheme.settings) + ", options)) }" + trailing);
        }
    });
    s.line('}');
    for (var _i = 0, flatTree_1 = flatTree; _i < flatTree_1.length; _i++) {
        var resource = flatTree_1[_i];
        var relativeUri = resource.relativeUri, uriParameters = resource.uriParameters;
        for (var _b = 0, _c = resource.methods; _b < _c.length; _b++) {
            var method = _c[_b];
            if (method.annotations && method.annotations['client.methodName']) {
                var methodName = method.annotations['client.methodName'].structuredValue;
                var type = method_1.isQueryMethod(method) ? 'query' : 'body';
                var headers = parameters_1.getDefaultParameters(method.headers);
                if (Object.keys(uriParameters).length) {
                    s.line("Client.prototype." + methodName + " = function (uriParams, " + type + ", opts) {");
                    s.line("  var uriParameters = extend(" + stringify(parameters_1.getDefaultParameters(uriParameters)) + ", uriParams)");
                    s.line("  var options = extend({ " + type + ": " + type + ", uriParameters: uriParameters, headers: " + stringify(headers) + " }, opts)");
                    s.line("  return request(this, " + stringify(method.method) + ", " + stringify(relativeUri) + ", options)");
                    s.line("}");
                }
                else {
                    s.line("Client.prototype." + methodName + " = function (" + type + ", opts) {");
                    s.line("  var options = extend({ " + type + ": " + type + ", headers: " + stringify(headers) + " }, opts)");
                    s.line("  return request(this, " + stringify(method.method) + ", " + stringify(relativeUri) + ", options)");
                    s.line("}");
                }
            }
        }
    }
    createProtoResources(withParams, noParams, 'Client');
    createProtoMethods(nestedTree.methods, 'Client', 'this', "''");
    createChildren(nestedTree.children);
    function createProtoMethods(methods, id, _client, _path) {
        for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
            var method = methods_1[_i];
            var headers = parameters_1.getDefaultParameters(method.headers);
            var type = method_1.isQueryMethod(method) ? 'query' : 'body';
            s.line(id + ".prototype." + camelCase(method.method) + " = function (" + type + ", opts) {");
            s.line("  var options = extend({ " + type + ": " + type + ", headers: " + stringify(headers) + " }, opts)");
            s.line("  return request(" + _client + ", " + stringify(method.method) + ", " + _path + ", options)");
            s.line("}");
        }
    }
    function separateChildren(resource) {
        var withParams = {};
        var noParams = {};
        for (var _i = 0, _a = Object.keys(resource.children); _i < _a.length; _i++) {
            var key = _a[_i];
            var child = resource.children[key];
            if (Object.keys(child.uriParameters).length) {
                withParams[child.methodName] = child;
            }
            else {
                noParams[child.methodName] = child;
            }
        }
        return { withParams: withParams, noParams: noParams };
    }
    function toParamsFunction(child, _client, _prefix) {
        return "function (uriParams) { return new " + child.id + "(" + _client + ", " + _prefix + "template(" + stringify(child.relativeUri) + ", extend(" + stringify(parameters_1.getDefaultParameters(child.uriParameters)) + ", uriParams))) }";
    }
    function createProtoResources(withParams, noParams, id) {
        for (var _i = 0, _a = Object.keys(withParams); _i < _a.length; _i++) {
            var key = _a[_i];
            var child = withParams[key];
            if (noParams[key] != null) {
                continue;
            }
            s.line(id + ".prototype." + child.methodName + " = " + toParamsFunction(child, 'this._client', 'this._path + '));
        }
    }
    function createResource(resource) {
        var _a = separateChildren(resource), withParams = _a.withParams, noParams = _a.noParams;
        s.line("function " + resource.id + " (client, path) {");
        s.line("  this._client = client");
        s.line("  this._path = path");
        createThisResources(withParams, noParams, 'this._client', 'this._path + ');
        s.line("}");
        createProtoResources(withParams, noParams, resource.id);
        createProtoMethods(resource.methods, resource.id, 'this._client', 'this._path');
        createChildren(resource.children);
    }
    function createChildren(children) {
        for (var _i = 0, _a = Object.keys(children); _i < _a.length; _i++) {
            var key = _a[_i];
            createResource(children[key]);
        }
    }
    function createThisResources(withParams, noParams, _client, _prefix) {
        for (var _i = 0, _a = Object.keys(noParams); _i < _a.length; _i++) {
            var key = _a[_i];
            var child = noParams[key];
            var constructor = "new " + child.id + "(" + _client + ", " + _prefix + stringify(child.relativeUri) + ")";
            if (withParams[key] == null) {
                s.line("  this['" + child.methodName + "'] = " + constructor);
            }
            else {
                s.line("  this['" + child.methodName + "'] = setprototypeof(" + toParamsFunction(withParams[key], _client, _prefix) + ", " + constructor + ")");
            }
        }
    }
    return s.toString();
}
exports.default = default_1;
//# sourceMappingURL=index.js.js.map