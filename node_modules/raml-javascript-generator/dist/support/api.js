"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var extend = require("xtend");
var uniqueId = require("uniqueid");
var resource_1 = require("./resource");
function hasSecurity(api, type) {
    return api.securitySchemes.some(function (schemes) {
        for (var _i = 0, _a = Object.keys(schemes); _i < _a.length; _i++) {
            var key = _a[_i];
            if (schemes[key].type === type) {
                return true;
            }
        }
        return false;
    });
}
exports.hasSecurity = hasSecurity;
function getSecuritySchemes(api) {
    var schemes = [];
    if (api.securitySchemes) {
        for (var _i = 0, _a = api.securitySchemes; _i < _a.length; _i++) {
            var nested = _a[_i];
            for (var _b = 0, _c = Object.keys(nested); _b < _c.length; _b++) {
                var key = _c[_b];
                schemes.push(nested[key]);
            }
        }
    }
    return schemes;
}
exports.getSecuritySchemes = getSecuritySchemes;
function allResources(api) {
    var array = [];
    function recurse(resources, prevUri, prevUriParams) {
        for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {
            var resource = resources_1[_i];
            var relativeUri = prevUri + resource.relativeUri;
            var uriParameters = resource_1.getUsedUriParameters(relativeUri, extend(resource.uriParameters, prevUriParams));
            var methods = resource.methods ? resource.methods : [];
            var description = resource.description;
            array.push({ methods: methods, relativeUri: relativeUri, uriParameters: uriParameters, description: description });
            if (resource.resources) {
                recurse(resource.resources, relativeUri, uriParameters);
            }
        }
    }
    recurse(api.resources, '', {});
    return array;
}
exports.allResources = allResources;
function nestedResources(api) {
    var methodId = uniqueId('Method');
    var resourceId = uniqueId('Resource');
    var resource = {
        id: resourceId(),
        methodName: undefined,
        methods: [],
        relativeUri: '/',
        uriParameters: {},
        children: {}
    };
    function makeResource(node, child, segments) {
        if (segments.length === 0) {
            if (child.methods) {
                for (var _i = 0, _a = child.methods; _i < _a.length; _i++) {
                    var method = _a[_i];
                    node.methods.push({
                        id: methodId(),
                        method: method.method,
                        headers: method.headers
                    });
                }
            }
            return node;
        }
        var key = segments[0];
        var childResource = key === '/' ? node : node.children[key];
        if (childResource == null) {
            childResource = node.children[key] = {
                id: resourceId(),
                methodName: resource_1.toMethodName(key),
                children: {},
                methods: [],
                uriParameters: resource_1.getUsedUriParameters(key, child.uriParameters),
                relativeUri: key
            };
        }
        return makeResource(childResource, child, segments.slice(1));
    }
    function handle(resource, children) {
        for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
            var child = children_1[_i];
            var segments = child.relativeUri.split(/(?=[\/\.])/g);
            var childResource = makeResource(resource, child, segments);
            if (child.resources) {
                handle(childResource, child.resources);
            }
        }
    }
    handle(resource, api.resources);
    return resource;
}
exports.nestedResources = nestedResources;
//# sourceMappingURL=api.js.map