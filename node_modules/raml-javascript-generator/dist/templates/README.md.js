"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var paramCase = require("param-case");
var pascalCase = require("pascal-case");
var camelCase = require("camel-case");
var strands_1 = require("strands");
var api_1 = require("../support/api");
var resource_1 = require("../support/resource");
var method_1 = require("../support/method");
function default_1(api) {
    var s = new strands_1.Strands();
    var projectName = paramCase(api.title);
    var className = pascalCase(api.title);
    s.multiline("# " + api.title + "\n\n> Browser and node module for making API requests against [" + api.title + "](" + api.baseUri + ").\n\n## Installation\n\n```sh\nnpm install " + projectName + " --save\n```\n\n## Usage\n\n```js\nvar " + className + " = require('" + projectName + "')\n\nvar client = new " + className + "()\n```\n");
    if (api_1.hasSecurity(api, 'OAuth 2.0')) {
        s.multiline("### Authentication\n\n#### OAuth 2.0\n\nThis API supports authentication with [OAuth 2.0](https://github.com/mulesoft/js-client-oauth2). Initialize the `OAuth2` instance with the application client id, client secret and a redirect uri to authenticate with users.\n\n```js\nvar auth = new " + className + ".security.<method>({\n  clientId:     '123',\n  clientSecret: 'abc',\n  redirectUri:  'http://example.com/auth/callback'\n});\n\n// Available methods for OAuth 2.0:");
        for (var _i = 0, _a = api_1.getSecuritySchemes(api); _i < _a.length; _i++) {
            var scheme = _a[_i];
            if (scheme.type === 'OAuth 2.0') {
                s.line(" - " + camelCase(scheme.name));
            }
        }
        s.line('```');
    }
    s.multiline("### Options\n\nYou can set options when you initialize a client or at any time with the `options` property. You may also override options per request by passing an object as the last argument of request methods. For example:\n\n```javascript\nvar client = new " + className + "({ ... })\n\nclient('GET', '/', {\n  baseUri: 'http://example.com',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n```\n\n#### Base URI\n\nYou can override the base URI by setting the `baseUri` property, or initializing a client with a base URI. For example:\n\n```javascript\nnew " + className + "({\n  baseUri: 'https://example.com'\n});\n```\n\n### Helpers\n\nExports `" + className + ".form`, which exposes a cross-platform `FormData` interface that can be used with request bodies.\n\n### Methods\n\nAll methods return a HTTP request instance of [Popsicle](https://github.com/blakeembrey/popsicle), which allows the use of promises (and streaming in node).\n");
    for (var _b = 0, _c = api_1.allResources(api); _b < _c.length; _b++) {
        var resource = _c[_b];
        for (var _d = 0, _e = resource.methods; _d < _e.length; _d++) {
            var method = _e[_d];
            s.line("#### " + method_1.getDisplayName(method, resource));
            s.line();
            if (Object.keys(resource.uriParameters).length) {
                s.line(resource_1.getUriParametersSnippet(resource));
                s.line();
            }
            if (method.description) {
                s.multiline(method.description.trim());
                s.line();
            }
            s.multiline("```js\nclient." + method_1.getRequestSnippet(method, resource) + ".then(...)\n```\n  ");
        }
    }
    s.line('## License');
    s.line();
    s.line('Apache 2.0');
    return s.toString();
}
exports.default = default_1;
//# sourceMappingURL=README.md.js.map